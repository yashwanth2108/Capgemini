
Capgemini Training

Topic : MongoDB 

BSON  -> Binary representation of JSON. (Increase speed and more space).
MongoDB use Collections for Storing Data.
MongoDB use CAP theorm { Consistency , Availabilty , Partition Tolerance } 
Patterns in Mongo  -> Schema Versioning , Subset , Computed , Bucket ,  Extended Reference
default port number 27017


https://www.w3resource.com/mongodb-exercises/mongodb-exercise-20.php

Topic : Mongo Shell Commands

show dbs -> show databases
use first-test  -> u can use an Database that doesn't exist
db.users.insertOne( { Name : 'Manav' , Age ; 29 } ) -> add one object to data
db.users.insertMany( [ { Name : 'Manav' , Age ; 29 } , { Name : 'Manav' , Age ; 29 } ] ) -> add Many object to data
show collections  -> show all collections we created (record)
db.collections -> give name to inplace of collections to record holder
db.users.find()  -> find record inside
db.users.find( { Age : { $gt : 29 } } )  ->find data of Age is greater than 29  | gt = greatert than , lt = lower than ,  gte = greater than and equal to
 db.users.insertOne({name: {F_Name : 'Manav' , L_Name: 'Verma' },Age : 31 })
 db.users.find({"name.F_Name" : 'Manav'}) -> find sub record like name to first name
db.users.update({name:'Manav'},{$set : {Age: 30}}) -> update record
 db.users.deleteOne({name: 'Manav Verma'})  ->delete one record
db.createCollection('Books')  -> create Collection 
db.dropDatabase() -> drop database
db.createCollection('Name',{ capped : true , size: give_size , max : give_limit }) --> CApped Collection , it will limit the collection size
db.users.find( { $or: [ { name : 'Manav' } , {  Age : {$gt : 29 } } ] } )   -> filter using Or and And opretator 


Aggregation : 

match

db.Person.aggregate([{ $match: {tags : { $size : 3 } }}])

group

db.Person.aggregate([{ $group : { _id : { age : "$age" , gender : "$gender" } } }])

project

db.getCollection('Person').aggregate([{$project : {name : 1}])

sort

db.getCollection('Person').aggregate([{$sort : {name : 1}])

count

db.Person.aggregate([{ $count: "age" }])

db.Person.aggregate([{ $count: "age" }]).toArray().length

db.Person.aggregate([{ $count: "age" }]).itcount()    --> faster

db.Person.aggregate([{ $count: "total" }])
db.Person.find({}).count()                                          --> much faster

limit

db.getCollection('Person').aggregate([ { $limit :  100 } , { $sort : {name : 1}])

skip


unwind

db.Person.aggregate([{ $unwind: "$Array" },{$Project : {age : 1, name : 1}}])